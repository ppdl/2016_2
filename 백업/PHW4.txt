/*
 * Name: Cho young jae
 * Student ID: 2013147513
 * Don't forget to remove the package line (if it exists)
 */
import java.util.HashMap;
import java.util.PriorityQueue;
import java.util.ArrayList;
/*
 * Do not import anything else
 */
public class Graph
{	    private int numNodes, numEdges;
    
    /*
     * Our instance variables
     *
     * numNodes - int - holds the number of nodes currently in the graph
     * numEdges - int - holds the number of edges currently in the graph
     *
     * You may add any other instance variables that you wish
     */
   private ArrayList<Node> nodes;
   private ArrayList<Edge> edges;
    public Graph()
    {
        /*
         * Constructor for our Graph
         */
    	this.numNodes=0;
    	this.numEdges=0;
    	nodes = new ArrayList<Node>();
    	edges = new ArrayList<Edge>();
    }
    public Node addVertex(String name)
    {
        /*
         * Add a vertex with the given name to the graph
         * 
         * Return null if there is already a vertex with this name, otherwise
         * return the constructed vertex
         */
    	if(contains(name)) return null;
    	
    	numNodes++;
    	nodes.add(new Node(name));
    	return nodes.get(getNumNodes()-1);
    }
    public Edge addEdge(Node u, Node v, int weight)
    {
        /*
         * Add an edge with the given endpoints and weight to the graph
         *
         * If u and/or v do not exist, create them and add them to the graph
         * and then add the edge
         * 
         * If an edge with these endpoints already exists, do not overwrite it
         *
         * Note that this graph is undirected, meaning an edge u,v is the same 
         * as v,u
         *
         *
         * Return null if there is already an edge with these endpoints or if u
         * and v are the same. Otherwise, return the edge
         */
    	if(contains(u,v) || u == v) return null;
    	
    	numEdges++;
    	addVertex(u.getName());
    	addVertex(v.getName());
    	edges.add(new Edge(u, v, weight));
    	return edges.get(getNumEdges()-1);
    }
    public HashMap<Node, ArrayList<Edge>> getAdjacencyList()
    {
        /*
         * Return a hashmap with all of the nodes in the graph as the keys
         *     and the values being a list of all the edges that have the node
         *     as an endpoint
         */
    	HashMap<Node, ArrayList<Edge>> hmap = new HashMap<Node, ArrayList<Edge>>();
    	for(Node n : nodes){
    		hmap.put(n, new ArrayList<Edge>());
    		for(Edge e : edges){
    			if(e.getU().getName() == n.getName() || e.getV().getName() == n.getName())
    				hmap.get(n).add(e);
    		}
    	}
    	return hmap;
    }
    public HashMap<Node, Integer> dijkstra(Node source)
    {
        /*
         * Return a hashmap with all of the nodes in the graph as the keys and
         * the value being the length of the shortest path from the source to
         * the node. Return null if there are negative weights in the graph
         */
    	for(Edge e : edges)
    		if(e.getWeight() < 0) return null;
    	
    	HashMap<Node, Integer> Dijkstra = new HashMap<Node, Integer>();
    	HashMap<Node, ArrayList<Edge>> NODE = getAdjacencyList();
    	ArrayList<Node> copyNodes = new ArrayList<Node>(nodes);
    	
    	for(Node n : nodes)
    		n.setValue(Integer.MAX_VALUE);
    	source.setValue(0);
    	PriorityQueue<Node> pq = new PriorityQueue<Node>(nodes);
    	
    	while(!pq.isEmpty()){
    		Node del = pq.poll();
    		for(Edge e : NODE.get(del)){
    			if(getEndPoint(del, e).getValue() > del.getValue() + e.getWeight())
    				getEndPoint(del, e).setValue(del.getValue() + e.getWeight());
    		}
    		nodes.remove(del);
    		Dijkstra.put(del, del.getValue());
    		pq = new PriorityQueue<Node>(nodes);
    	}
    	
    	nodes = copyNodes;
    	return Dijkstra;
    }
    public int shortestPathLength(Node source, Node target)
    {
        /*
         * Return the length of the shortest path from source to target
         */
    	HashMap<Node, Integer> h = dijkstra(source);
    	return h.get(target);
    }
    public ArrayList<Edge> minSpanningTree()
    {
        /*
         * Return a list of all of the edges in the minimum spanning tree of
         * the graph. The order does not matter.
         */
    	ArrayList<Edge> MST = new ArrayList<Edge>();
    	ArrayList<ArrayList<Node>> cloud = new ArrayList<ArrayList<Node>>();
    	PriorityQueue<Edge> E = new PriorityQueue<Edge>(edges);
    	
    	while(MST.size() != getNumNodes()-1){
    		ArrayList<Node> C1 = null;
    		ArrayList<Node> C2 = null;
    		Edge e = E.poll();
    		for(ArrayList<Node> C : cloud){
    			if(C.contains(e.getU())) C1 = C;
    			if(C.contains(e.getV())) C2 = C;
    		}
    		
    		if((C1 == null) && (C2 == null)){
    			MST.add(e);
    			ArrayList<Node> newCloud = new ArrayList<Node>();
    			newCloud.add(e.getU());
    			newCloud.add(e.getV());
    			cloud.add(newCloud);
    		}
    		else if(C1 != C2){
    			MST.add(e);
    			if(C1 == null) C2.add(e.getU());
    			else if(C2 == null) C1.add(e.getV());
    			else{
    				C1.addAll(C2);
    				cloud.remove(C2);
    			}    			
    		}
    	}
    	return MST;    	
    }
    public int minSpanningTreeWeight()
    {
        /*
         * Return the total weight of the minimum spanning tree of the graph
         */
    	ArrayList<Edge> MST = minSpanningTree();
    	int sumWeight = 0;
    	for(Edge e : MST) sumWeight += e.getWeight();
    	
    	return sumWeight;
    }
    public int getNumNodes()
    {
        /*
         * Return the number of nodes in the graph
         */
    	return numNodes;
    }
    public int getNumEdges()
    {
        /*
         * Return the number of edges in the graph
         */
    	return numEdges;
    }
    public ArrayList<Node> getNodes()
    {
        /*
         * Return the nodes in the graph
         */
    	return nodes;
    }
    public ArrayList<Edge> getEdges()
    {
        /*
         * Return the edges in the graph
         */
    	return edges;
    }
    public boolean contains(String data)
    {
    	for(Node n : nodes)
    	{
    		if(n.getName() == data) return true;
    	}
    	return false;
    }
    
    public boolean contains(Node u, Node v)
    {
    	for(Edge e : edges)
    	{
    		if((e.getU() == u && e.getV() == v) || (e.getU() == v && e.getV() == u)) return true;
    	}
    	return false;
    }
    
    public Node getEndPoint(Node source, Edge e)
    {
    	if(e.getU() == source) return e.getV();
    	else return e.getU();
    }
    
}/*
 *  ================================
 *  Do not modify below this comment
 *  ================================
 */
class Node implements Comparable<Node>
{    private String name;
    private int value;
    public Node(String name)
    {
        this.name = name;
        this.value = 0;
    }
    public void setName(String name)
    {
        this.name = name;
    }
    public void setValue(int value)
    {
        this.value = value;
    }
    public String getName()
    {
        return name;
    }
    public int getValue()
    {
        return value;
    }
    public int compareTo(Node n)
    {
        return this.value - n.getValue();
    }
}class Edge implements Comparable<Edge>
{    private Node u,v;
    private int weight;
    public Edge(Node u, Node v, int weight)
    {
        this.u = u;
        this.v = v;
        this.weight = weight;
    }
    public void setU(Node u)
    {
        this.u = u;
    }
    public void setV(Node v)
    {
        this.v = v;
    }
    public void setWeight(int weight)
    {
        this.weight = weight;
    }
    public Node getU()
    {
        return u;
    }
    public Node getV()
    {
        return v;
    }
    public int getWeight()
    {
        return weight;
    }
    public int compareTo(Edge e)
    {
        return this.weight - e.getWeight();
    }
}